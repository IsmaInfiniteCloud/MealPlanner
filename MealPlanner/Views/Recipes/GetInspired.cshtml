@*@model MealPlanner.Models.Recipe
@{
    ViewBag.Title = "Get Inspired";
}

<h2>@ViewBag.Title</h2>

<div>
    <h3>@Model.Name</h3>
    <h4>Instructions</h4>
    <p>@Model.Instructions</p>


</div>

<p>
    @Html.ActionLink("Try another recipe", "GetInspired")
</p>


<p class="funny-text">Who's hungry? Let's get cooking! 😋</p>

<style>
    .funny-text {
        font-size: 24px;
        font-weight: bold;
        color: #f67280;
        background-color: #f8b195;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
    }
</style>
*@
@model MealPlanner.Models.Recipe
@{
    ViewBag.Title = "Get Inspired";
}

<h2>@ViewBag.Title</h2>

<div id="recipeContainer" style="display: none;">
    <h3>@Model.Name</h3>
    <h4>Instructions</h4>
    <p>@Model.Instructions</p>
@*
    <h4>Ingredients</h4>
    <ul>
        @foreach (var ingredient in Model.Ingredients)
        {
            <li>@ingredient.Name</li>
        }
    </ul>*@
</div>



<p class="funny-text" id="fadeText">Who's hungry? Let's get cooking! 😋</p>


<style>
    .btn-btn-success {
        font-size: 80px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-color 0.3s, box-shadow 0.3s;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .btn-btn-success:hover {
            background-color: #218838;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .button-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        padding: 0;
    }
</style>

<div class="button-container">
    <button class="btn-btn-success bounce " id="startButton" onclick="hideButton()">
        &#10145;&#65039; QUESTION &#11013;&#65039;
    </button>
</div>


    <script>
        function hideButton() {
            document.getElementById('startButton').style.display = 'none';
        }
    </script>

<style>
    .funny-text {
        font-size: 24px;
        font-weight: bold;
        color: #f67280;
        background-color: #f8b195;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
    }
</style>

<script>
    const fadeText = document.getElementById("fadeText");
    const startButton = document.getElementById("startButton");
    const recipeContainer = document.getElementById("recipeContainer");

    // Liste des textes à afficher
    const textList = [

    "🥳 Ever feel like your stomach is throwing a party and you're not invited? 🤷",
        "🍽️ Are you tired of playing the 'what's -for-dinner ? ' guessing game? 🤔",
        "🌶️ Looking for some culinary inspiration to spice up your life ? 🔥",
        "  🚀 Buckle up, foodies! We've got your taste buds covered... 😋"
    ];

    // Boolean flag to track if the text list has been displayed before
    let textListDisplayed = false;

    // Fonction pour afficher les textes un à un et ensuite la recette
    async function displayTextsAndShowRecipe() {
        if (!textListDisplayed) {
            for (const text of textList) {
                fadeText.innerText = text;
                fadeText.style.opacity = 0;

                await fadeIn(fadeText);
                await wait(2000);
                await fadeOut(fadeText);
            }

            // Set the flag to true after the text list has been displayed
            textListDisplayed = true;
        }

        recipeContainer.style.display = "block";
    }
    // Fonction pour faire apparaître le texte
    function fadeIn(element) {
        return new Promise(resolve => {
            let opacity = 0;
            const interval = setInterval(() => {
                opacity += 0.1;
                element.style.opacity = opacity;

                if (opacity >= 1) {
                    clearInterval(interval);
                    resolve();
                }
            }, 50);
        });
    }

    // Fonction pour faire disparaître le texte
    function fadeOut(element) {
        return new Promise(resolve => {
            let opacity = 1;
            const interval = setInterval(() => {
                opacity -= 0.1;
                element.style.opacity = opacity;

                if (opacity <= 0) {
                    clearInterval(interval);
                    resolve();
                }
            }, 50);
        });
    }

    // Fonction pour attendre un certain temps (en millisecondes)
    function wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Lancer l'animation des textes et afficher la recette au clic sur le bouton
    startButton.addEventListener("click", displayTextsAndShowRecipe);
</script>

<p>
    @Html.ActionLink("Try another recipe", "GetInspired")
</p>